#include "Vehicles.h"

#include "../../SDK/Classes/FortniteGame_Classes.h"

#include "../../../Configs/Config.h"

#include "../../Actors/ActorCache.h"
#include "../../Input/Input.h"

std::chrono::steady_clock::time_point Features::Exploits::Vehicle::LastTeleportTime = std::chrono::steady_clock::now();

void Features::Exploits::Vehicle::Tick() {
	SDK::AFortAthenaVehicle* Vehicle = reinterpret_cast<SDK::AFortPawn*>(SDK::GetLocalPawn())->GetVehicle();
	if (Vehicle) {
		if (Config::Exploits::Vehicle::Enabled) {
			if (Config::Exploits::Vehicle::InfiniteBoost) {
				if (Vehicle->IsA(SDK::AFortAthenaAntelopeVehicle::StaticClass())) {
					SDK::AFortAthenaAntelopeVehicle* Antelope = reinterpret_cast<SDK::AFortAthenaAntelopeVehicle*>(Vehicle);

					Antelope->FortAntelopeVehicleConfigs()->SetBoostAccumulationRate(FLT_MAX);
					Antelope->FortAntelopeVehicleConfigs()->SetBoostExpenseRate(0.f);
				}

				if (Vehicle->IsA(SDK::AFortAthenaJackalVehicle::StaticClass())) {
					SDK::AFortAthenaJackalVehicle* Jackal = reinterpret_cast<SDK::AFortAthenaJackalVehicle*>(Vehicle);

					for (int i = 0; i < Jackal->BoostTimers().Num(); i++) {
						Jackal->BoostTimers()[i].SetCharge(1.0f);
					}
				}

				if (Vehicle->IsA(SDK::AFortAthenaDoghouseVehicle::StaticClass())) {
					SDK::AFortAthenaDoghouseVehicle* Doghouse = reinterpret_cast<SDK::AFortAthenaDoghouseVehicle*>(Vehicle);

					Doghouse->BoostAction()->SetCharge(1.0f);
				}
			}

            if (Config::Exploits::Vehicle::Fly) {
                float MoveForwardBackward = 0.0f;
                float MoveLeftRight = 0.0f;
                float MoveUpDown = 0.0f;

                if (Input::IsKeyDown(Input::KeyName::W)) MoveForwardBackward += 1.0f;
                if (Input::IsKeyDown(Input::KeyName::S)) MoveForwardBackward -= 1.0f;
                if (Input::IsKeyDown(Input::KeyName::A)) MoveLeftRight -= 1.0f;
                if (Input::IsKeyDown(Input::KeyName::D)) MoveLeftRight += 1.0f;
                if (Input::IsKeyDown(Input::KeyName::SpaceBar)) MoveUpDown += 1.0f;
                if (Input::IsKeyDown(Input::KeyName::LeftControl)) MoveUpDown -= 1.0f;

				SDK::FVector ForwardVector = SDK::UKismetMathLibrary::StaticClass()->GetForwardVector(Actors::MainCamera.Rotation);

                SDK::FVector MovementDirection = ForwardVector * MoveForwardBackward +
                    SDK::UKismetMathLibrary::StaticClass()->GetRightVector(Actors::MainCamera.Rotation) * MoveLeftRight +
                    SDK::FVector(0, 0, 1) * MoveUpDown;

				SDK::FVector NewLocation = Vehicle->GetRootComponent()->GetPosition() + (MovementDirection * Config::Exploits::Vehicle::FlySpeed);
				// Adjust NewLocation for 60 FPS using LastTeleportTime (so it doesn't depend on FPS)
				NewLocation = NewLocation + MovementDirection * (Config::Exploits::Vehicle::FlySpeed / 60.f) * std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - LastTeleportTime).count();

				if (MovementDirection != SDK::FVector()) {
					Vehicle->K2_SetActorLocation(NewLocation, false, nullptr, true);
					Vehicle->K2_SetActorRotation(Actors::MainCamera.Rotation, true);
				}

                LastTeleportTime = std::chrono::steady_clock::now();
            }
		}
	}
}