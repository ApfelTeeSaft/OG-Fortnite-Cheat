#include "Weapons.h"

#include "../../SDK/Classes/FortniteGame_Classes.h"

#include "../../../Configs/Config.h"

#include "../../SDK/SDKInitializer.h"

void Features::Exploits::Weapons::Tick(SDK::AFortWeapon* Weapon) {
	if (Weapon) {
		// We have to init here because we need a valid AFortWeapon to get the VFT
		if (SDK::Cached::VFT::GetWeaponStats == 0x0) {
			SDKInitializer::InitGetWeaponStatsIndex(Weapon);
		}
		else {
			SDK::FFortBaseWeaponStats* WeaponStats = nullptr;
			WeaponStats = Weapon->WeaponStats();

			if (WeaponStats) {
				if (Weapon->IsPickaxe()) {
					SDK::FFortMeleeWeaponStats* MeleeWeaponStats = (SDK::FFortMeleeWeaponStats*)WeaponStats;
					if (Config::Exploits::Pickaxe::FastPickaxe) {
						MeleeWeaponStats->SetSwingPlaySpeed(Config::Exploits::Pickaxe::SpeedMultiplier, &Config::Exploits::Pickaxe::FastPickaxe);
					}
				}
				else if (Weapon->IsA(SDK::AFortWeaponRanged::StaticClass())) {
					SDK::FFortRangedWeaponStats* RangedWeaponStats = (SDK::FFortRangedWeaponStats*)WeaponStats;

					if (Config::Exploits::Weapon::NoSpread) {
						// you definetly dont need to do all of these, but yeah
						RangedWeaponStats->SetSpread(0.f, &Config::Exploits::Weapon::NoSpread);
						RangedWeaponStats->SetSpreadDownsights(0.f, &Config::Exploits::Weapon::NoSpread);
						RangedWeaponStats->SetStandingStillSpreadMultiplier(0.f, &Config::Exploits::Weapon::NoSpread);
						RangedWeaponStats->SetAthenaCrouchingSpreadMultiplier(0.f, &Config::Exploits::Weapon::NoSpread);
						RangedWeaponStats->SetAthenaJumpingFallingSpreadMultiplier(0.f, &Config::Exploits::Weapon::NoSpread);
						RangedWeaponStats->SetAthenaSprintingSpreadMultiplier(0.f, &Config::Exploits::Weapon::NoSpread);
						RangedWeaponStats->SetMinSpeedForSpreadMultiplier(FLT_MAX, &Config::Exploits::Weapon::NoSpread);
						RangedWeaponStats->SetMaxSpeedForSpreadMultiplier(FLT_MAX, &Config::Exploits::Weapon::NoSpread);
					}

					if (Config::Exploits::Weapon::NoReload) {
						RangedWeaponStats->SetReloadTime(0.f, &Config::Exploits::Weapon::NoReload);
						RangedWeaponStats->SetReloadTime(0.f, &Config::Exploits::Weapon::NoReload);
					}

					if (Config::Exploits::Weapon::NoRecoil) {
						RangedWeaponStats->SetRecoilVert(0.f, &Config::Exploits::Weapon::NoRecoil);
						RangedWeaponStats->SetRecoilHoriz(0.f, &Config::Exploits::Weapon::NoRecoil);
					}

					if (Config::Exploits::Weapon::RapidFire) {
						if (SDK::Cached::Offsets::FortWeapon::LastFireTimeVerified != 0x0) {
							float LastFireTime = Weapon->LastFireTime();
							float LastFireTimeVerified = Weapon->LastFireTimeVerified();

							Weapon->SetLastFireTime(LastFireTime + LastFireTimeVerified - 0.3f);
						}
						else {
							float LastFireTime = Weapon->LastFireTime();

							Weapon->SetLastFireTime(LastFireTime - 0.3f);
						}
					}

					if (Config::Exploits::Weapon::UseDamageMultiplier) {
						RangedWeaponStats->SetBulletsPerCartridge(Config::Exploits::Weapon::DamageMultiplier, &Config::Exploits::Weapon::UseDamageMultiplier);
					}
				}
			}
		}
	}
}